openapi: 3.0.3
info:
  title: CapChiCAl - Chile Food Composition Database API
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Admins
  - name: Foods
  - name: Misc
  - name: Origins
components:
  responses:
    UnauthorizedError:
      description: Session token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    AnyNutrient:
      type: object
      required:
        - id
        - name
        - measurementUnit
        - standardized
      properties:
        id:
          type: number
        name:
          type: string
        measurementUnit:
          type: string
        standardized:
          type: boolean
        note:
          type: string
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: Message explaining the cause.
    FoodGroup:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
        name:
          type: string
    FoodType:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
        name:
          type: string
    GroupedNutrients:
      type: object
      required:
        - macronutrients
        - micronutrients
      properties:
        macronutrients:
          type: array
          items:
            $ref: "#/components/schemas/MacroNutrient"
        micronutrients:
          type: object
          properties:
            vitamins:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
            minerals:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
    Language:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
          enum: [ es, en, pt ]
        name:
          type: string
    LangualCode:
      type: object
      required:
        - descriptor
        - children
      properties:
        descriptor:
          type: string
        children:
          type: array
          items:
            type: object
            required:
              - code
              - descriptor
            properties:
              code:
                type: string
              descriptor:
                type: string
    NutrientMeasurement:
      type: object
      required:
        - nutrientId
        - name
        - measurementUnit
        - average
        - standardized
      properties:
        nutrientId:
          type: number
        name:
          type: string
        measurementUnit:
          type: string
        average:
          type: number
        deviation:
          type: number
        min:
          type: number
        max:
          type: number
        sampleSize:
          type: number
        standardized:
          type: boolean
        dataType:
          type: string
          enum:
            - analytic
            - calculated
            - assumed
            - borrowed
        note:
          type: string
        referenceCodes:
          type: array
          items:
            type: number
    MacroNutrient:
      allOf:
        - $ref: "#/components/schemas/AnyNutrient"
        - type: object
          required:
            - isEnergy
          properties:
            isEnergy:
              type: boolean
            components:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
    MeasurementReference:
      type: object
      required:
        - code
        - type
        - title
        - authors
      properties:
        code:
          type: number
        type:
          type: string
          enum:
            - report
            - thesis
            - article
            - website
            - book
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        other:
          type: string
        refYear:
          type: number
        cityName:
          type: string
        pageStart:
          type: number
        pageEnd:
          type: number
        volume:
          type: number
        issue:
          type: number
        volumeYear:
          type: number
        journalName:
          type: string
    MultipleFoodsResult:
      type: array
      items:
        type: object
        required:
          - id
          - code
          - groupId
          - typeId
          - commonName
          - scientificName
          - subspecies
        properties:
          id:
            type: string
          code:
            type: string
          groupId:
            type: number
          typeId:
            type: number
          commonName:
            $ref: "#/components/schemas/StringTranslation"
          scientificName:
            type: string
            nullable: true
          subspecies:
            type: string
            nullable: true
    Origin:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
    SingleFoodResult:
      type: object
      required:
        - id
        - code
        - group
        - type
        - commonName
        - ingredients
        - nutrientMeasurements
        - langualCodes
        - references
      properties:
        id:
          type: string
          pattern: ^\d+$
        code:
          type: string
        strain:
          type: string
        brand:
          type: string
        observation:
          type: string
        group:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        type:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        scientificName:
          type: string
        subspecies:
          type: string
        commonName:
          $ref: "#/components/schemas/StringTranslation"
        ingredients:
          $ref: "#/components/schemas/StringTranslation"
        nutrientMeasurements:
          type: object
          required:
            - energy
            - mainNutrients
            - micronutrients
          properties:
            energy:
              type: array
              items:
                $ref: "#/components/schemas/NutrientMeasurement"
            mainNutrients:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/NutrientMeasurement"
                  - type: object
                    required:
                      - components
                    properties:
                      components:
                        $ref: "#/components/schemas/NutrientMeasurement"
            micronutrients:
              type: object
              required:
                - vitamins
                - minerals
              properties:
                vitamins:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
                minerals:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
        langualCodes:
          type: array
          items:
            $ref: "#/components/schemas/LangualCode"
        references:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementReference"
    StringTranslation:
      type: object
      required:
        - es
        - en
        - pt
      properties:
        es:
          type: string
          nullable: true
        en:
          type: string
          nullable: true
        pt:
          type: string
          nullable: true
  securitySchemes:
    SessionToken:
      type: http
      scheme: bearer
      description: The admin's session token.
paths:
  /admins/{username}:
    post:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Register a new admin."
      security:
        - SessionToken: [ ]
      requestBody:
        description: The new admin's password.
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        201:
          description: Admin successfully registered.
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Admin already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Remove an existing admin."
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Admin successfully removed.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /admins/{username}/session:
    post:
      tags: [ Admins ]
      summary: Generate a new session token for the selected admin.
      requestBody:
        description: The admin's password.
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        201:
          description: Session token successfully generated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: Revoke the admin's session token.
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Token successfully revoked.
        401:
          $ref: "#/components/responses/UnauthorizedError"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /foods:
    get:
      tags: [ Foods ]
      summary: Get a list of foods matching the filter.
      responses:
        200:
          description: Successfully retrieved filtered foods.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultipleFoodsResult"
        400:
          description: Malformed query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      parameters:
        - name: name
          in: query
          description: Name of the food.
          required: false
          schema:
            type: string
        - name: origin
          in: query
          description: List of origin ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: group
          in: query
          description: List of group ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: type
          in: query
          description: List of type ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: nutrient
          in: query
          description: List of nutrient ids of food measurements. Must have the same length as "operator" and "value"
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: operator
          in: query
          description: List of operators for food measurements. Must have the same length as "nutrient" and "value"
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [ <, <=, =, ">=", ">" ]
        - name: value
          in: query
          description: List of values of food measurements. Must have the same length as "nutrient" and "operator"
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
  /foods/{id_or_code}:
    get:
      tags: [ Foods ]
      summary: Get food information by ID or code.
      responses:
        200:
          description: Successfully retrieved food information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFoodResult"
        400:
          description: Requested food ID or code is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Requested food doesn't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Foods ]
      summary: "[ROOT ONLY] Delete a food by its ID or code."
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Successfully deleted the food.
        400:
          description: Requested food ID or code is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Requested food doesn't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: id_or_code
        in: path
        description: The food's ID or code.
        required: true
        schema:
          type: string
          pattern: ^\d+$|^[A-Z\d]{8}$
  /groups:
    get:
      tags: [ Foods ]
      summary: Get all the food groups.
      responses:
        200:
          description: Successfully retrieved all food groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodGroup"
  /languages:
    get:
      tags: [ Misc ]
      summary: Get all the available languages.
      responses:
        200:
          description: Successfully retrieved all languages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LangualCode"
  /nutrients:
    get:
      tags: [ Foods ]
      summary: Get all the food nutrients.
      responses:
        200:
          description: Successfully retrieved all nutrients.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupedNutrients"
  /origins/regions:
    get:
      tags: [ Origins ]
      summary: Get a list of all the available regions.
      responses:
        200:
          description: A list with the regions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Origin"
                  - type: object
                    required:
                      - number
                      - place
                    properties:
                      number:
                        type: number
                      place:
                        type: number
  /origins/{regionId}/provinces/:
    get:
      tags: [ Origins ]
      summary: Get a list of all the available provinces in the selected region.
      responses:
        200:
          description: A list with the provinces in the region.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        404:
          description: Region does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: regionId
        in: path
        description: The id of the region.
        required: true
        schema:
          type: number
          minimum: 1
  /origins/{provinceId}/communes/:
    get:
      tags: [ Origins ]
      summary: Get a list of all the available communes in the selected province.
      responses:
        200:
          description: A list with the communes in the province.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        404:
          description: Province does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: provinceId
        in: path
        description: The id of the province.
        required: true
        schema:
          type: number
          minimum: 1
  /origins/{communeId}/locations/:
    get:
      tags: [ Origins ]
      summary: Get a list of all the available locations in the selected commune.
      responses:
        200:
          description: A list with the locations in the commune.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Origin"
                  - type: object
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        enum:
                          - city
                          - town
        404:
          description: Commune does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: communeId
        in: path
        description: The id of the commune.
        required: true
        schema:
          type: number
          minimum: 1
  /ping:
    get:
      tags: [ Misc ]
      summary: Check if the API is available.
      responses:
        200:
          description: API is available.
  /types:
    get:
      tags: [ Foods ]
      summary: Get all the food types.
      responses:
        200:
          description: Successfully retrieved all food types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodType"
