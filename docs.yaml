openapi: 3.0.3
info:
  title: CapChiCAl - Chile Food Composition Database API
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Admins
  - name: CSV
  - name: Foods
  - name: Misc
  - name: Origins
  - name: References
components:
  responses:
    UnauthorizedError:
      description: Session token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    AnyNutrient:
      type: object
      required:
        - id
        - name
        - measurementUnit
        - standardized
      properties:
        id:
          type: number
        name:
          type: string
        measurementUnit:
          type: string
        standardized:
          type: boolean
        note:
          type: string
    CSVFlags:
      type: number
      description: >
        Composed of 3 bits in the following order: (`updated`, `is_new`, `valid`).
        Access each flag with bitwise operations.
    CSVFood:
      type: object
      required:
        - flags
        - code
        - group
        - type
        - commonName
        - ingredients
        - langualCodes
        - measurements
      properties:
        flags:
          $ref: "#/components/schemas/CSVFlags"
        code:
          $ref: "#/components/schemas/CSVValueString"
        strain:
          $ref: "#/components/schemas/CSVValueString"
        origin:
          $ref: "#/components/schemas/CSVValueString"
        brand:
          $ref: "#/components/schemas/CSVValueString"
        observation:
          $ref: "#/components/schemas/CSVValueString"
        group:
          $ref: "#/components/schemas/CSVValueNumber"
        type:
          $ref: "#/components/schemas/CSVValueNumber"
        scientificName:
          $ref: "#/components/schemas/CSVValueNumber"
        subspecies:
          $ref: "#/components/schemas/CSVValueNumber"
        commonName:
          $ref: "#/components/schemas/CSVStringTranslation"
        ingredients:
          $ref: "#/components/schemas/CSVStringTranslation"
        langualCodes:
          type: array
          items:
            $ref: "#/components/schemas/CSVValueNumber"
        measurements:
          type: array
          items:
            $ref: "#/components/schemas/CSVMeasurement"
    CSVMeasurement:
      type: object
      required:
        - flags
        - nutrientId
        - average
        - dataType
      properties:
        flags:
          $ref: "#/components/schemas/CSVFlags"
        nutrientId:
          type: number
        average:
          $ref: "#/components/schemas/CSVValueNumber"
        deviation:
          $ref: "#/components/schemas/CSVValueNumber"
        min:
          $ref: "#/components/schemas/CSVValueNumber"
        max:
          $ref: "#/components/schemas/CSVValueNumber"
        sampleSize:
          $ref: "#/components/schemas/CSVValueNumber"
        referenceCodes:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/CSVValueNumber"
        dataType:
          allOf:
            - $ref: "#/components/schemas/CSVValueNumber"
            - type: object
              required:
                - parsed
              properties:
                parsed:
                  type: string
                  nullable: true
                  enum:
                    - analytic
                    - calculated
                    - assumed
                    - borrowed
                old:
                  type: string
                  nullable: true
                  enum:
                    - analytic
                    - calculated
                    - assumed
                    - borrowed
    CSVReference:
      type: object
      required:
        - flags
        - code
        - authors
        - title
        - type
      properties:
        flags:
          $ref: "#/components/schemas/CSVFlags"
        code:
          $ref: "#/components/schemas/CSVValueNumber"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/CSVValueNumber"
        title:
          $ref: "#/components/schemas/CSVValueString"
        type:
          allOf:
            - $ref: "#/components/schemas/CSVValueString"
            - type: object
              required:
                - parsed
              properties:
                parsed:
                  type: string
                  nullable: true
                  enum:
                    - report
                    - thesis
                    - article
                    - website
                    - book
                old:
                  type: string
                  nullable: true
                  enum:
                    - report
                    - thesis
                    - article
                    - website
                    - book
        journal:
          $ref: "#/components/schemas/CSVValueNumber"
        volume:
          $ref: "#/components/schemas/CSVValueNumber"
        issue:
          $ref: "#/components/schemas/CSVValueNumber"
        volumeYear:
          $ref: "#/components/schemas/CSVValueNumber"
        pageStart:
          $ref: "#/components/schemas/CSVValueNumber"
        pageEnd:
          $ref: "#/components/schemas/CSVValueNumber"
        city:
          $ref: "#/components/schemas/CSVValueNumber"
        year:
          $ref: "#/components/schemas/CSVValueNumber"
        other:
          $ref: "#/components/schemas/CSVValueString"
    CSVStringTranslation:
      type: object
      required:
        - es
        - en
        - pt
      properties:
        es:
          allOf:
            - $ref: "#/components/schemas/CSVValueString"
          nullable: true
        en:
          allOf:
            - $ref: "#/components/schemas/CSVValueString"
          nullable: true
        pt:
          allOf:
            - $ref: "#/components/schemas/CSVValueString"
          nullable: true
    CSVValueCommon:
      type: object
      required:
        - raw
        - flags
      properties:
        raw:
          type: string
        flags:
          $ref: "#/components/schemas/CSVFlags"
    CSVValueNumber:
      allOf:
        - $ref: "#/components/schemas/CSVValueCommon"
        - type: object
          required:
            - parsed
          properties:
            parsed:
              type: number
              nullable: true
            old:
              type: string
              nullable: true
    CSVValueString:
      allOf:
        - $ref: "#/components/schemas/CSVValueCommon"
        - type: object
          required:
            - parsed
          properties:
            parsed:
              type: string
              nullable: true
            old:
              type: string
              nullable: true
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: Message explaining the cause.
    FoodGroup:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
        name:
          type: string
    FoodType:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
        name:
          type: string
    FoodUpdate:
      type: object
      minProperties: 1
      properties:
        commonName:
          $ref: "#/components/schemas/PartialStringTranslation"
        ingredients:
          $ref: "#/components/schemas/PartialStringTranslation"
        scientificNameId:
          type: number
          minimum: 1
        subspeciesId:
          type: number
          minimum: 1
        groupId:
          type: number
          minimum: 1
        typeId:
          type: number
          minimum: 1
        strain:
          type: string
        brand:
          type: string
        observation:
          type: string
        originIds:
          type: array
          items:
            type: number
            minimum: 1
        nutrientMeasurements:
          type: array
          items:
            $ref: "#/components/schemas/NutrientMeasurementUpdate"
        langualCodes:
          type: array
          items:
            type: number
            minimum: 1
    GroupedLangualCode:
      allOf:
        - $ref: "#/components/schemas/LangualCode"
        - type: object
          required:
            - children
          properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/LangualCode"
    GroupedNutrients:
      type: object
      required:
        - macronutrients
        - micronutrients
      properties:
        macronutrients:
          type: array
          items:
            $ref: "#/components/schemas/MacroNutrient"
        micronutrients:
          type: object
          properties:
            vitamins:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
            minerals:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
    Language:
      type: object
      required:
        - id
        - code
        - name
      properties:
        id:
          type: number
        code:
          type: string
          enum: [ es, en, pt ]
        name:
          type: string
    LangualCode:
      type: object
      required:
        - code
        - descriptor
      properties:
        code:
          type: string
        descriptor:
          type: string
    NewArticle:
      anyOf:
        - type: object
          required:
            - pageStart
            - pageEnd
            - volumeId
          properties:
            pageStart:
              type: number
            pageEnd:
              type: number
            volumeId:
              type: number
        - type: object
          required:
            - pageStart
            - pageEnd
            - newVolume
          properties:
            pageStart:
              type: number
            pageEnd:
              type: number
            newVolume:
              $ref: "#/components/schemas/NewJournalVolume"
    NewFood:
      type: object
      required:
        - commonName
        - groupId
        - typeId
        - nutrientMeasurements
        - langualCodes
      properties:
        commonName:
          allOf:
            - $ref: "#/components/schemas/PartialStringTranslation"
            - type: object
              required:
                - es
              properties:
                es:
                  type: string
        ingredients:
          $ref: "#/components/schemas/PartialStringTranslation"
        scientificNameId:
          type: number
          minimum: 1
        subspeciesId:
          type: number
          minimum: 1
        groupId:
          type: number
          minimum: 1
        typeId:
          type: number
          minimum: 1
        strain:
          type: string
        brand:
          type: string
        observation:
          type: string
        originIds:
          type: array
          items:
            type: number
            minimum: 1
        nutrientMeasurements:
          type: array
          minLength: 1
          items:
            $ref: "#/components/schemas/NewNutrientMeasurement"
        langualCodes:
          type: array
          minLength: 1
          items:
            type: number
            minimum: 1
    NewFoodGroup:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
        name:
          type: string
    NewFoodType:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
        name:
          type: string
    NewJournalVolume:
      anyOf:
        - type: object
          required:
            - volume
            - issue
            - year
            - journalId
          properties:
            volume:
              type: number
            issue:
              type: number
            year:
              type: number
            journalId:
              type: number
        - type: object
          required:
            - volume
            - issue
            - year
            - newJournal
          properties:
            volume:
              type: number
            issue:
              type: number
            year:
              type: number
            newJournal:
              type: string
    NewNutrient:
      anyOf:
        - type: object
          required:
            - type
            - name
            - measurementUnit
            - standardized
            - note
          properties:
            type:
              type: string
              enum:
                - energy
                - macronutrient
            name:
              type: string
            measurementUnit:
              type: string
            standardized:
              type: boolean
            note:
              type: string
        - type: object
          required:
            - type
            - name
            - measurementUnit
            - standardized
            - note
            - macronutrientId
          properties:
            type:
              type: string
              enum:
                - component
            name:
              type: string
            measurementUnit:
              type: string
            standardized:
              type: boolean
            note:
              type: string
            macronutrientId:
              type: number
              minimum: 1
        - type: object
          required:
            - type
            - name
            - measurementUnit
            - standardized
            - note
            - micronutrientType
          properties:
            type:
              type: string
              enum:
                - micronutrient
            name:
              type: string
            measurementUnit:
              type: string
            standardized:
              type: boolean
            note:
              type: string
            micronutrientType:
              type: string
              enum:
                - vitamin
                - mineral
    NewNutrientMeasurement:
      type: object
      required:
        - nutrientId
        - average
        - dataType
      properties:
        nutrientId:
          type: number
          minimum: 1
        average:
          type: number
          minimum: 0
        deviation:
          type: number
          minimum: 0
        min:
          type: number
          minimum: 0
        max:
          type: number
          minimum: 0
        sampleSize:
          type: number
          minimum: 1
        dataType:
          type: string
          enum:
            - analytic
            - calculated
            - assumed
            - borrowed
        referenceCodes:
          type: array
          items:
            type: number
            minimum: 1
    NewOrigin:
      anyOf:
        - type: object
          required:
            - name
            - type
            - regionNumber
            - regionPlace
          properties:
            name:
              type: string
            type:
              type: string
              enum:
                - region
            regionNumber:
              type: number
              minimum: 1
            regionPlace:
              type: number
              minimum: 0
        - type: object
          required:
            - name
            - type
            - parentId
          properties:
            name:
              type: string
            type:
              type: string
              enum:
                - province
                - commune
            parentId:
              type: number
              minimum: 1
        - type: object
          required:
            - name
            - type
            - parentId
            - locationType
          properties:
            name:
              type: string
            type:
              type: string
              enum:
                - location
            parentId:
              type: number
              minimum: 1
            locationType:
              type: string
              enum:
                - city
                - town
    NewReference:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          enum:
            - report
            - thesis
            - article
            - website
            - book
        title:
          type: string
        authorIds:
          type: array
          items:
            type: number
        newAuthors:
          type: array
          items:
            type: string
        year:
          type: number
        newArticle:
          $ref: "#/components/schemas/NewArticle"
        cityId:
          type: number
        newCity:
          type: string
        other:
          type: string
    NewScientificName:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    NewSubspecies:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    NutrientMeasurement:
      type: object
      required:
        - nutrientId
        - name
        - measurementUnit
        - average
        - standardized
      properties:
        nutrientId:
          type: number
        name:
          type: string
        measurementUnit:
          type: string
        average:
          type: number
        deviation:
          type: number
        min:
          type: number
        max:
          type: number
        sampleSize:
          type: number
        standardized:
          type: boolean
        dataType:
          type: string
          enum:
            - analytic
            - calculated
            - assumed
            - borrowed
        note:
          type: string
        referenceCodes:
          type: array
          items:
            type: number
    NutrientMeasurementUpdate:
      type: object
      minProperties: 2
      required:
        - nutrientId
      properties:
        nutrientId:
          type: number
          minimum: 1
        average:
          type: number
          minimum: 0
        deviation:
          type: number
          minimum: 0
        min:
          type: number
          minimum: 0
        max:
          type: number
          minimum: 0
        sampleSize:
          type: number
          minimum: 1
        dataType:
          type: string
          enum:
            - analytic
            - calculated
            - assumed
            - borrowed
        referenceCodes:
          type: array
          items:
            type: number
            minimum: 1
    MacroNutrient:
      allOf:
        - $ref: "#/components/schemas/AnyNutrient"
        - type: object
          properties:
            isEnergy:
              type: boolean
              description: Always true if present.
            components:
              type: array
              items:
                $ref: "#/components/schemas/AnyNutrient"
    MeasurementReference:
      type: object
      required:
        - code
        - type
        - title
        - authors
      properties:
        code:
          type: number
        type:
          type: string
          enum:
            - report
            - thesis
            - article
            - website
            - book
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        other:
          type: string
        refYear:
          type: number
        cityName:
          type: string
        pageStart:
          type: number
        pageEnd:
          type: number
        volume:
          type: number
        issue:
          type: number
        volumeYear:
          type: number
        journalName:
          type: string
    MultipleFoodsResult:
      type: array
      items:
        type: object
        required:
          - id
          - code
          - groupId
          - typeId
          - commonName
        properties:
          id:
            type: string
          code:
            type: string
          groupId:
            type: number
          typeId:
            type: number
          commonName:
            $ref: "#/components/schemas/StringTranslation"
          scientificName:
            type: string
          subspecies:
            type: string
    Origin:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - region
            - province
            - commune
            - location
        parentId:
          type: number
          description: Only present if `type` is not `region`
        regionNumber:
          type: number
          description: Only present if `type` is `region`
        regionPlace:
          type: number
          description: Only present if `type` is `region`
        locationType:
          type: string
          description: Only present if `type` is `location`
          enum:
            - city
            - town
    OriginChild:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
        type:
          type: string
          description: Only present if it's a location
          enum:
            - city
            - town
    OriginWithId:
      allOf:
        - $ref: "#/components/schemas/Origin"
        - type: object
          required:
            - id
          properties:
            id:
              type: number
    PartialStringTranslation:
      type: object
      properties:
        es:
          type: string
        en:
          type: string
        pt:
          type: string
    Reference:
      type: object
      required:
        - code
        - type
        - title
        - authors
      properties:
        code:
          type: number
        type:
          type: string
          enum:
            - report
            - thesis
            - article
            - website
            - book
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        year:
          type: number
        volume:
          type: number
        issue:
          type: number
        volumeYear:
          type: number
        journalName:
          type: string
        pageStart:
          type: number
        pageEnd:
          type: number
        city:
          type: string
        other:
          type: string
    ReferenceAuthor:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
    ReferenceCity:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
    ReferenceJournal:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
    ReferenceJournalVolume:
      type: object
      required:
        - id
        - journalId
        - volume
        - issue
        - year
      properties:
        id:
          type: number
        journalId:
          type: number
        volume:
          type: number
        issue:
          type: number
        year:
          type: number
    ReferenceArticle:
      type: object
      required:
        - id
        - volumeId
        - pageStart
        - pageEnd
      properties:
        id:
          type: number
        volumeId:
          type: number
        pageStart:
          type: number
        pageEnd:
          type: number
    ScientificName:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
    SingleFoodResult:
      type: object
      required:
        - id
        - code
        - group
        - type
        - commonName
        - ingredients
        - origins
        - nutrientMeasurements
        - langualCodes
        - references
      properties:
        id:
          type: string
          pattern: ^\d+$
        code:
          type: string
        strain:
          type: string
        brand:
          type: string
        observation:
          type: string
        group:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        type:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        scientificName:
          type: string
        subspecies:
          type: string
        commonName:
          $ref: "#/components/schemas/StringTranslation"
        ingredients:
          $ref: "#/components/schemas/StringTranslation"
        origins:
          type: array
          items:
            type: object
            required:
              - id
              - name
            properties:
              id:
                type: number
              name:
                type: string
        nutrientMeasurements:
          type: object
          required:
            - energy
            - mainNutrients
            - micronutrients
          properties:
            energy:
              type: array
              items:
                $ref: "#/components/schemas/NutrientMeasurement"
            mainNutrients:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/NutrientMeasurement"
                  - type: object
                    required:
                      - components
                    properties:
                      components:
                        $ref: "#/components/schemas/NutrientMeasurement"
            micronutrients:
              type: object
              required:
                - vitamins
                - minerals
              properties:
                vitamins:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
                minerals:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
        langualCodes:
          type: array
          items:
            $ref: "#/components/schemas/GroupedLangualCode"
        references:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementReference"
    StringTranslation:
      type: object
      required:
        - es
        - en
        - pt
      properties:
        es:
          type: string
          nullable: true
        en:
          type: string
          nullable: true
        pt:
          type: string
          nullable: true
    Subspecies:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
  securitySchemes:
    SessionToken:
      type: http
      scheme: bearer
      description: The admin's session token.
paths:
  /admins/{username}:
    post:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Register a new admin."
      security:
        - SessionToken: [ ]
      requestBody:
        description: The new admin's password.
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        201:
          description: Admin successfully registered.
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: Admin already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Remove an existing admin."
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Admin successfully removed.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /admins/{username}/session:
    post:
      tags: [ Admins ]
      summary: Generate a new session token for the selected admin.
      requestBody:
        description: The admin's password.
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        201:
          description: Session token successfully generated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: Revoke the admin's session token.
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Token successfully revoked.
        401:
          $ref: "#/components/responses/UnauthorizedError"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /csv:
    post:
      tags: [ CSV ]
      summary: Parse the contents of a CSV file into food and reference objects.
      description: Each cell of the CSV is verified and flagged as `valid`, `new`, and `updated`.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - foods
                - references
              properties:
                foods:
                  type: string
                references:
                  type: string
      responses:
        200:
          description: Successfully parsed CSV file contents.
          content:
            application/json:
              schema:
                type: object
                required:
                  - foods
                  - references
                properties:
                  foods:
                    type: array
                    items:
                      $ref: "#/components/schemas/CSVFood"
                  references:
                    type: array
                    items:
                      $ref: "#/components/schemas/CSVReference"
        400:
          description: Request body is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /foods:
    get:
      tags: [ Foods ]
      summary: Get a list of foods matching the filter.
      responses:
        200:
          description: Successfully retrieved filtered foods.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultipleFoodsResult"
      parameters:
        - name: name
          in: query
          description: Name of the food.
          required: false
          schema:
            type: string
        - name: region
          in: query
          description: List of region ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: group
          in: query
          description: List of group ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: type
          in: query
          description: List of type ids of the food.
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: nutrient
          in: query
          description: List of nutrient ids of food measurements. Must have the same length as "operator" and "value".
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 1
        - name: operator
          in: query
          description: >
            List of operators for food measurements. Must have the same length as "nutrient" and "value".
            Each item must be one of: `<`, `<=`, `=`, `>=`, `>`.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: List of values of food measurements. Must have the same length as "nutrient" and "operator".
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: 0
  /foods/{code}:
    get:
      tags: [ Foods ]
      summary: Get food information by code.
      responses:
        200:
          description: Successfully retrieved food information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFoodResult"
        400:
          description: Requested food code is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Requested food doesn't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [ Foods ]
      summary: Create a new food identified by its code.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFood"
      responses:
        201:
          description: Successfully created the new food.
        400:
          description: Food code or request body are malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: A food with that code already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags: [ Foods ]
      summary: Update an existing food.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodUpdate"
      responses:
        201:
          description: Successfully updated the food.
        400:
          description: Food code or request body are malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Food does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: code
        in: path
        description: The food's code.
        required: true
        schema:
          type: string
          pattern: ^[A-Z0-9]{8}$
  /groups:
    get:
      tags: [ Foods ]
      summary: Get all the food groups.
      responses:
        200:
          description: Successfully retrieved all food groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodGroup"
    post:
      tags: [ Foods ]
      summary: Create a new food group.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFoodGroup"
      responses:
        201:
          description: Successfully created the new food group.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: There's a food group with the same code or name.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /languages:
    get:
      tags: [ Misc ]
      summary: Get all the available languages.
      responses:
        200:
          description: Successfully retrieved all languages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupedLangualCode"
  /langual_codes:
    get:
      tags: [ Foods ]
      summary: Get all the LanguaL codes.
      responses:
        200:
          description: Successfully retrieved all LanguaL codes.
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/GroupedLangualCode"
                  - type: array
                    items:
                      $ref: "#/components/schemas/LangualCode"
      parameters:
        - name: grouped
          in: query
          description: Whether to group the LanguaL codes by parent or not.
          required: false
          schema:
            type: boolean
  /nutrients:
    get:
      tags: [ Foods ]
      summary: Get all the food nutrients.
      responses:
        200:
          description: Successfully retrieved all nutrients.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupedNutrients"
    post:
      tags: [ Foods ]
      summary: Create a new nutrient.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewNutrient"
      responses:
        201:
          description: Successfully created the new nutrient.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: A nutrient with that type and name already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /origins:
    get:
      tags: [ Origins ]
      summary: Get a list of all the available origins.
      responses:
        200:
          description: A list with the origins.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OriginWithId"
    post:
      tags: [ Origins ]
      summary: Create a new origin. Returns the id of the new origin.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrigin"
      responses:
        201:
          description: Successfully created the new origin.
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: number
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Origin with `parentId` does not exist. Only if `type` is not `region`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: There's a child with the same name (case-insensitive), region number or region place.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /origins/{id}:
    get:
      tags: [ Origins ]
      summary: Get information of an origin by its id.
      responses:
        200:
          description: The origin's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        400:
          description: The id is not a number.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Origin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: id
        in: path
        description: The id of the origin.
        required: true
        schema:
          type: number
          minimum: 1
  /origins/{id}/children:
    get:
      tags: [ Origins ]
      summary: Get a list of all the origin's children. Will fail if the id corresponds to a origin of type `location`.
      responses:
        200:
          description: A list with the origin's children.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OriginChild"
        400:
          description: Invalid id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Origin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: id
        in: path
        description: The id of the origin.
        required: true
        schema:
          type: number
          minimum: 1
  /ping:
    get:
      tags: [ Misc ]
      summary: Check if the API is available.
      responses:
        200:
          description: API is available.
  /references:
    get:
      tags: [ References ]
      summary: Get a list of all the references.
      responses:
        200:
          description: A list with the references.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reference"
    post:
      tags: [ References ]
      summary: Create a new reference.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReference"
      responses:
        201:
          description: Successfully created the new reference.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: Some property inside the request body is causing a conflict with existing data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /references/authors:
    get:
      tags: [ References ]
      summary: Get a list of all the reference authors.
      responses:
        200:
          description: A list with the reference authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferenceAuthor"
  /references/cities:
    get:
      tags: [ References ]
      summary: Get a list of all the reference cities.
      responses:
        200:
          description: A list with the reference cities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferenceCity"
  /references/journals:
    get:
      tags: [ References ]
      summary: Get a list of all the reference journals.
      responses:
        200:
          description: A list with the reference journals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferenceJournal"
  /references/journal_volumes:
    get:
      tags: [ References ]
      summary: Get a list of all the reference journal volumes.
      responses:
        200:
          description: A list with the reference journal volumes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferenceJournalVolume"
  /references/articles:
    get:
      tags: [ References ]
      summary: Get a list of all the reference articles.
      responses:
        200:
          description: A list with the reference articles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferenceArticle"
  /scientific_names:
    get:
      tags: [ Foods ]
      summary: Get all the food scientific names.
      responses:
        200:
          description: Successfully retrieved all food scientific names.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScientificName"
    post:
      tags: [ Foods ]
      summary: Create a new scientific name.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewScientificName"
      responses:
        201:
          description: Successfully created the new scientific name.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: That scientific name already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /subspecies:
    get:
      tags: [ Foods ]
      summary: Get all the food subspecies.
      responses:
        200:
          description: Successfully retrieved all food subspecies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subspecies"
    post:
      tags: [ Foods ]
      summary: Create a new subspecies.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSubspecies"
      responses:
        201:
          description: Successfully created the new subspecies.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: That subspecies already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /types:
    get:
      tags: [ Foods ]
      summary: Get all the food types.
      responses:
        200:
          description: Successfully retrieved all food types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FoodType"
    post:
      tags: [ Foods ]
      summary: Create a new food type.
      security:
        - SessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFoodType"
      responses:
        201:
          description: Successfully created the new food type.
        400:
          description: Malformed request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        409:
          description: There's a food type with the same code or name.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
