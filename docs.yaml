openapi: 3.0.3
info:
  title: CapChiCAl - Chile Food Composition Database API
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Admins
  - name: Foods
  - name: Ping
components:
  responses:
    UnauthorizedError:
      description: Session token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: Message explaining the cause.
    LangualCode:
      type: object
      required:
        - descriptor
        - children
      properties:
        descriptor:
          type: string
        children:
          type: array
          items:
            type: object
            required:
              - code
              - descriptor
            properties:
              code:
                type: string
              descriptor:
                type: string
    NutrientMeasurement:
      type: object
      required:
        - name
        - measurementUnit
        - average
        - standardized
      properties:
        name:
          type: string
        measurementUnit:
          type: string
        average:
          type: number
        deviation:
          type: number
        min:
          type: number
        max:
          type: number
        sampleSize:
          type: number
        standardized:
          type: boolean
        dataType:
          type: string
          enum:
            - analytic
            - calculated
            - assumed
            - borrowed
        note:
          type: string
        referenceCodes:
          type: array
          items:
            type: number
    MeasurementReference:
      type: object
      required:
        - code
        - type
        - title
        - authors
      properties:
        code:
          type: number
        type:
          type: string
          enum:
            - report
            - thesis
            - article
            - website
            - book
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        other:
          type: string
        refYear:
          type: number
        cityName:
          type: string
        pageStart:
          type: number
        pageEnd:
          type: number
        volume:
          type: number
        issue:
          type: number
        volumeYear:
          type: number
        journalName:
          type: string
    SingleFoodResult:
      type: object
      required:
        - id
        - code
        - group
        - type
        - commonName
        - ingredients
        - nutrientMeasurements
        - langualCodes
        - references
      properties:
        id:
          type: string
          pattern: ^\d+$
        code:
          type: string
        strain:
          type: string
        brand:
          type: string
        observation:
          type: string
        group:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        type:
          type: object
          required:
            - name
            - code
          properties:
            code:
              type: string
            name:
              type: string
        scientificName:
          type: string
        subspecies:
          type: string
        commonName:
          $ref: "#/components/schemas/StringTranslation"
        ingredients:
          $ref: "#/components/schemas/StringTranslation"
        nutrientMeasurements:
          type: object
          required:
            - energy
            - mainNutrients
            - micronutrients
          properties:
            energy:
              type: array
              items:
                $ref: "#/components/schemas/NutrientMeasurement"
            mainNutrients:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/NutrientMeasurement"
                  - type: object
                    required:
                      - components
                    properties:
                      components:
                        $ref: "#/components/schemas/NutrientMeasurement"
            micronutrients:
              type: object
              required:
                - vitamins
                - minerals
              properties:
                vitamins:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
                minerals:
                  type: array
                  items:
                    $ref: "#/components/schemas/NutrientMeasurement"
        langualCodes:
          type: array
          items:
            $ref: "#/components/schemas/LangualCode"
        references:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementReference"
    StringTranslation:
      type: object
      properties:
        es:
          type: string
        en:
          type: string
        pt:
          type: string
  securitySchemes:
    SessionToken:
      type: http
      scheme: bearer
      description: The admin's session token.
paths:
  /admins/{username}:
    post:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Register a new admin."
      security:
        - SessionToken: [ ]
      requestBody:
        description: The new admin's password.
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        201:
          description: Admin successfully registered.
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Admin already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: "[ROOT ONLY] Remove an existing admin."
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Admin successfully removed.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /admins/{username}/session:
    post:
      tags: [ Admins ]
      summary: Generate a new session token for the selected admin.
      requestBody:
        description: The admin's password.
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        201:
          description: Session token successfully generated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Admin does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Admins ]
      summary: Revoke the admin's session token.
      security:
        - SessionToken: [ ]
      responses:
        204:
          description: Token successfully revoked.
        401:
          $ref: "#/components/responses/UnauthorizedError"
    parameters:
      - name: username
        in: path
        description: The admin's username.
        required: true
        schema:
          type: string
          minLength: 8
          maxLength: 32
          pattern: ^[A-Za-z0-9_.]{8,32}$
  /ping:
    get:
      tags: [ Ping ]
      summary: Check if the API is available.
      responses:
        200:
          description: API is available.
  /foods/{id_or_code}:
    get:
      tags: [ Foods ]
      summary: Get food information by ID or code.
      responses:
        200:
          description: Successfully retrieved food information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleFoodResult"
        400:
          description: Requested food ID or code is malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Requested food doesn't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
